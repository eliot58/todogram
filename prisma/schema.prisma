// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  username       String    @unique
  fullName       String
  phone          String
  email          String    @unique
  passwordHash   String
  bio            String?
  avatarUrl      String?
  isVerify       Boolean   @default(false)
  isPrivate      Boolean   @default(false)
  verifiedAt     DateTime?
  createdAt      DateTime  @default(now())

  followersCount   Int     @default(0)
  followingCount   Int     @default(0)
  postCount        Int     @default(0)

  posts          Post[]
  stories        Story[]
  followers      Follower[] @relation("UserFollowers")
  following      Follower[] @relation("UserFollowing")
  likes          Like[]
  comments       Comment[]
  storyViews     StoryView[]
  savedPosts     SavedPost[]
  commentLikes   CommentLike[]

  closeFriends     CloseFriend[] @relation("UserCloseFriendsOwner")
  inCloseFriendsOf CloseFriend[] @relation("UserCloseFriendsMember")

  incomingFollowRequests FollowRequest[] @relation("FollowRequestsIncoming")
  outgoingFollowRequests FollowRequest[] @relation("FollowRequestsOutgoing")
}

enum FollowRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model FollowRequest {
  id          Int                  @id @default(autoincrement())
  requester   User                 @relation("FollowRequestsOutgoing", fields: [requesterId], references: [id], onDelete: Cascade)
  requesterId Int
  target      User                 @relation("FollowRequestsIncoming", fields: [targetId], references: [id], onDelete: Cascade)
  targetId    Int
  status      FollowRequestStatus  @default(PENDING)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt

  @@unique([requesterId, targetId])
  @@index([targetId, createdAt])
  @@index([requesterId, createdAt])
}

model Follower {
  id          Int      @id @default(autoincrement())
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  Int
  following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)
  followingId Int
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
  @@index([followerId, createdAt])
  @@index([followingId, createdAt])
}

model CloseFriend {
  id         Int      @id @default(autoincrement())
  owner      User     @relation("UserCloseFriendsOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId    Int
  friend     User     @relation("UserCloseFriendsMember", fields: [friendId], references: [id], onDelete: Cascade)
  friendId   Int
  createdAt  DateTime @default(now())

  @@unique([ownerId, friendId])
  @@index([ownerId, createdAt])
  @@index([friendId, createdAt])
}

model Post {
  id          Int         @id @default(autoincrement())
  caption     String?
  isReels     Boolean     @default(false)
  videoUrl    String?
  thumbnail   String?
  createdAt   DateTime    @default(now())

  user        User        @relation(fields: [userId], references: [id])
  userId      Int

  images      PostImage[]
  likes       Like[]
  comments    Comment[]
  savedBy     SavedPost[]

  shareCount  Int         @default(0)
  likesCount     Int        @default(0)
  commentsCount  Int        @default(0)
  savedCount     Int        @default(0)

  @@index([isReels, id])
  @@index([userId, createdAt])
}

model PostImage {
  id        Int      @id @default(autoincrement())
  url       String
  position  Int      @default(0)
  createdAt DateTime @default(now())

  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int

  @@unique([postId, position])
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  user   User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  post   Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int?

  @@unique([userId, postId])
  @@index([userId, createdAt])
  @@index([postId])
}

model SavedPost {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int

  @@unique([userId, postId])
  @@index([userId, createdAt])
  @@index([postId])
}

model Story {
  id          Int       @id @default(autoincrement())
  imageUrl    String?
  videoUrl    String?
  createdAt   DateTime  @default(now())
  expiresAt   DateTime

  user        User      @relation(fields: [userId], references: [id])
  userId      Int

  views       StoryView[]

  @@index([userId, expiresAt])
  @@index([expiresAt])
  @@index([userId, createdAt])
}

model StoryView {
  id        Int      @id @default(autoincrement())
  story     Story    @relation(fields: [storyId], references: [id])
  storyId   Int
  viewer    User     @relation(fields: [viewerId], references: [id])
  viewerId  Int
  viewedAt  DateTime @default(now())

  @@unique([storyId, viewerId])
}

model Comment {
  id          Int      @id @default(autoincrement())
  content     String
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
  userId      Int

  post        Post?    @relation(fields: [postId], references: [id])
  postId      Int?

  parentId    Int?
  parent      Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies     Comment[] @relation("CommentReplies")

  likes       CommentLike[]

  likesCount  Int      @default(0)

  @@index([postId, parentId, id])
  @@index([parentId, id])
  @@index([userId, createdAt])
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int

  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int

  @@unique([userId, commentId])
  @@index([commentId])
  @@index([userId, createdAt])
}